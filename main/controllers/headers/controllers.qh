/*
battleMETAL
Author: Peter Roohr
Date: 9/1/2016
mod - 1/15/2019 - a few refactors
Overview: 
  Controllers manage some state-level behavior for the target object.
  these are separated from model-control (animation).
  
*/

//Generic Unit controllers
void() ctrl_unit_update_frame;

void() ctrl_unit_clean_wgroups;
void() ctrl_unit_cleanup_mech;
void() ctrl_unit_cleanup_player;
void() ctrl_unit_cleanup_tank;
void(entity unitPiece) ctrl_unit_remove_piece;
void(entity comp) ctrl_unit_part_death;
void(entity unitCam) ctrl_unit_remove_cam;

//Mech entity controllers
void() ctrl_mech_die_player;

void() ctrl_update_mechplayer;
void() ai_ctrl_update_mechplayer;

void() ctrl_updateCenterTorso;
void() ai_ctrl_updateCenterTorso;

void() ctrl_updateLegs;
void() ctrl_dieLegs;

void() ctrl_player_mech_touch;

void() touch_mechPiece;

float( float isNew, float changeFlags ) ctrl_send_mech_ai;

//Building entity controllers
float( float isNew, float changedflags ) ctrl_send_turret;
float( float isNew, float changedflags ) ctrl_send_building;
void() building_burn_th;  //generic check-for-burning think
void() building_burn;
void() building_die;

//Vehicle entity controllers
void() ctrl_updateTank;
float( float isNew, float changedflags ) ctrl_send_tank;
float( float isNew, float changedflags ) ctrl_send_spg;
float( float isNew, float changedflags ) ctrl_send_gev;

//Generic entity controllers
void() ctrl_die_weapon;
void() ctrl_component_die;
void() ctrl_arm_die;
void() ctrl_component_drop;

float( float isNew, float changedFlags ) send_deploy_point;
float( float isNew, float changedFlags ) send_nav_point;
float( float isNew, float changedFlags ) send_objective;
float( float isNew, float changedFlags ) send_damage_zone;

//Weapon/equip controllers
void(entity wep) ctrl_weapon_think;
void(entity wep) ctrl_weapon_think_ai;
void() ctrl_weapon_fireOffset;
void() ctrl_weapon_remove_all;
void( float burstFire ) ctrl_weapon_updateAmmo;
void( float updateDelay ) ctrl_weapon_make_projectile;
float() ctrl_weapon_checkEnergy;
void() ctrl_missile_dud;
void() ctrl_missile_dud_touch;
void(entity wep) ctrl_weapon_update_player;

void() ctrl_missile_lastframe;