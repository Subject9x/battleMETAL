/*
battleMETAL
Author: Peter Roohr
Date: 8/27/2016
      mod 3/16/2017
      mod 10/28/2018
      mod 07/05/2019
Overview: utility functions for mod, header
*/

//console logging==========================================================
void(string msg, float val) cons_logAFloat;
void(string msg, vector v1) cons_logAVector;
void(string msg, string s1) cons_logAString;

void(string msg, float val, string split, float val2) cons_log2Float;
void(string msg, vector v1, string split, vector v2) cons_log2Vectors;
void(string msg, string s1, string split, string s2) cons_log2Strings;

//super DEBUG - use sparingly cause dat file I/O cost
void(string reason) log_me={
  local float logThis;
  logThis = fopen("log.txt", FILE_APPEND);
  fputs(logThis, "\n");
  fputs(logThis, strcat(self.classname,"\n"));
  fputs(logThis, strcat(ftos(self.spawnflags),"\n"));
  fputs(logThis, strcat(vtos(self.origin),"\n"));
  fputs(logThis, strcat(reason,"\n"));
  fclose(logThis);
};
//=========================================================================

vector(vector facing, vector centerpoint, vector sz_max) util_findOpenSpawnArea;

float(entity t) util_getMechHpAverage;
float(entity t) util_getMechHpTotal;

void(entity targ, entity src, vector ofs) util_setOffsetOrigin;
void(string mdl_name, float skinNum, float ef_flags) util_setModel;
void(float dmgMode, float solid_type, float move_type) util_setCollider;
void(float hp, float max_hp, float arm_type, float arm_val) util_setHealthArmor;
float(entity trg) util_checkPointAngle;
float(vector orig) util_checkPointAngleImpl;
float(vector org) util_lockOnChoke;
void(entity ent, vector pnt) util_chekPointToHitDir;

float(float numOfSides) util_roll_dice;

vector( vector viewAngle, float idealRange) util_applySpreadToTrace;
vector( vector start, vector offsets, vector viewAngle) util_getOffsetOfVector;

float(float v) anglemod;
float() crandom;

float(entity t, float tolerance) util_cornerSlopeCheck;
void(entity t) util_generateBuildingFoundation;

vector(vector angl, vector org, float zAdjust) util_dropToGround;

vector( vector entOrg, vector entAng, vector entMins, vector entMaxs ) util_pointNearBoxEdge;

void() util_MapDeveloperMarker;
void() util_DeveloperNodeMark;

void() BecomeExplosion;

void() dropToFloorCorners;

float(entity targ) infront;

vector(vector org, entity filter, float len, float useHeight) util_find_random_farpoint;

vector() util_trace_norm_angle;

float( vector last, vector now, float len ) util_movedelta;

#define macro_set_model(mdlName,skinNum,EFlags) local string path;self.effects = self.effects | EFlags;self.skin = skinNum;path = precache_model2( mdlName );setmodel(self, path);
#define macro_set_collider(dmgMode,solidType,moveType) self.takedamage=dmgMode;self.solid=solidType;self.movetype=moveType;
#define macro_set_offset(entitySrc,offSet) local vector next;local vector macOffset=offSet;makevectors(entitySrc.angles);next=entitySrc.origin+(v_up*macOffset_y)+(v_right*macOffset_x)+(v_forward*macOffset_z);setorigin(self, next);

