/*
  battleMETAL
  Date: 9/6/2018
  Author: Peter Roohr
  Overview: client particle system header
*/

/*
  Fog fun
*/
float FOG_STATE;  //0 = no change, 1 = change
float FOG_DENSITY;
float FOG_RED;
float FOG_GREEN;
float FOG_BLUE;
float FOG_ALPHA;
float FOG_DIST_MIN;
float FOG_DIST_MAX;
float FOG_DIST_TOP;
float FOG_FADE_DEPTH;

float FOG_TARG_DENSITY;
float FOG_TARG_RED;
float FOG_TARG_GREEN;
float FOG_TARG_BLUE;
float FOG_TARG_ALPHA;
float FOG_TARG_DIST_MIN;
float FOG_TARG_DIST_MAX;
float FOG_TARG_DIST_TOP;
float FOG_TARG_FADE_DEPTH;

float( float fogColor, float fogColorTarg  ) cl_particles_fogColorAdjust;
float( float fogDist, float fogDistTarg ) cl_particles_fogDistAdjust;
void() cl_particles_fogFrame;


//Particle globals - reduce func calls
  //GENERIC
float PTC_HIT_DIRT_SHOT_SML;
float PTC_HIT_DIRT_SHOT_MED;
float PTC_HIT_DIRT_SHOT_LRG;

float PTC_HIT_DIRT_ENE_SML;
float PTC_HIT_DIRT_ENE_MED;
float PTC_HIT_DIRT_ENE_LRG;

float PTC_HIT_DIRT_EXP_SML;
float PTC_HIT_DIRT_EXP_MED;
float PTC_HIT_DIRT_EXP_LRG;

float PTC_STOMP_ICE;
float PTC_STOMP_CITY;
float PTC_STOMP_BADLND;
float PTC_STOMP_TUNDRA;
float PTC_STOMP_SAND;

  //MUZZLE FLASH
float PTC_MUZZLE_ATC;
float PTC_MUZZLE_FLAK;
float PTC_MUZZLE_RPC;

//Particle data
.entity effect1, effect2, effect3;

.vector wind;

.void() pcl_explode;  //self implementing, whoo
.float pcl_effectnum;
.float trail_effectnum;
.vector pcl_velocity;
.float pcl_lifetime;
.float pcl_count;
.float pcl_fadeout; //time when debris starts to fade out

.float wait;
.float spawnflags;
.float count;
.float count1;
//.vector dest;

//===================================

void() particle_sys_ini_globals;


vector() te_read_vector;
vector() te_read_angle;

//AI voice selector
void( float randomBool ) ai_voice_ini;


//ported from effectinfo_api
void( vector org, vector windVel ) te_mech_crit;

void( entity item )te_weapon_fire_handler;

void() te_explode_mech_piece_th;
void(entity piece) te_explode_mech_piece;

void() te_building_fire_th;
entity( entity targetBuilding ) te_building_fire_start;

void( vector org, vector setVelocity, float total ) te_field_rad;
void( vector org, float total ) te_field_rad_light;

void( vector org, vector setVelocity, float total ) te_field_mineral;
void( vector org, float total ) te_field_mineral_light;

void( vector particleOrg, vector particleEnd ) te_field_quantum;
void( vector org, float total ) te_field_quantum_light;

void( vector org, float total ) te_unit_dust;
void() te_unit_dust_set;

void(vector entOrg, vector entAngl, float entSize, vector entMins, float leftBool) te_foot_stomp;

/*
  Client-side explosion shells
*/
void() te_missile_explode_th;
void( vector org, float explodeSize, vector explodeColor, float bloom ) te_missile_explode;

void() te_shield_hit_predraw;
void() te_shield_hit_th;
void() te_shield_hit;

void() te_shield_explode_th;
void( vector org, float vecSize ) te_shield_explode;


void( vector explodeColor ) te_object_explode;

/*
  Wreck event is when a unit is destroyed in combat.
  We send this event, and the client handles the entire presentation of it as much as possible.
*/
void() particle_vehicle_wreck_th;
void( float modelIndex, float skinNum, float lifetime, float vecSize, vector entOrg, vector entAngl ) particle_vehicle_wreck;

/*
  When a missile explodes...
*/
void() particle_missile_explode_th;
void( vector org, float explodeSize, vector explodeColor, float onShield ) particle_missile_explode;

/*
  When a mech piece is blown off;
*/
//void() particle_mech_chunk_th;
//void( float modelIndex, float skinNum, float vecSize, vector entOrg, vector entAngl ) particle_mech_chunk;

float(vector endPos, entity endEnt, float contentFlags) te_impact_type;

vector( vector startOrg ) te_apply_wind;
vector( vector entOrg, vector entAng, vector entMins, vector entMaxs ) util_pointNearBoxEdge;

/*
  mech corpse-piece
*/
entity(entity root, entity part, vector setAngle) te_mech_chunk_stand;

/*
  burning mech legs
*/
void( entity mechLegs ) te_mech_dead_legs;
void() te_mech_dead_legs_burn;
void() te_mech_dead_legs_smoke;
